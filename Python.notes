---------------------------- Python Version in Use ----------------------------
Shebang
#!/Users/xuansong/.bin/py38

----------------------------- keywords ----------------------------
!if-else
[python]
if a>b: 
    do_something()
[end]

! in (array): 
// test if a leid exists in know_nodes
[python]
if "00323" not in known_nodes:
    print("00323 is not known!")
[end]
! The usual convention for containers is that they are True while not empty and False when empty, so you can just do
[python]
while a:
    print a.pop()
[end]


! continue
! break
! pass


----------------------------- API ----------------------------
# List or array

# Tuple

# Dict

# check if a value exists in an array


---------------------------- Formatting rules ----------------------------
Commands
// introduction or description, explanation
# short text of what a command does

---------------------------- WHY PYTHON ----------------------------
// you could write a Unix shell script or Windows batch files for some of these tasks, but shell scripts are best at moving around files and changing text data, 
// not well-suited for GUI applications or games. You could write a C/C++/Java program, 
// but it can take a lot of development time to get even a first-draft program. Python is simpler to use, available on Windows, Mac OS X, and Unix operating systems, 
// and will help you get the job done more quickly.

---------------------------- Python Naming Convention ----------------------------
https://www.python.org/dev/peps/pep-0008/

Use 4-space indentation, and no tabs.

4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out.
Wrap lines so that they don’t exceed 79 characters.

This helps users with small displays and makes it possible to have several code files side-by-side on larger displays.
Use blank lines to separate functions and classes, and larger blocks of code inside functions.
When possible, put comments on a line of their own.
Use docstrings.
Use spaces around operators and after commas, but not directly inside bracketing constructs: a = f(1, 2) + g(3, 4).
Name your classes and functions consistently; the convention is to use UpperCamelCase for classes and lowercase_with_underscores for functions and methods. Always use self as the name for the first method argument (see A First Look at Classes for more on classes and methods).
Don’t use fancy encodings if your code is meant to be used in international environments. Python’s default, UTF-8, or even plain ASCII work best in any case.
Likewise, don’t use non-ASCII characters in identifiers if there is only the slightest chance people speaking a different language will read or maintain the code.

---------------------------- Python upgrading ----------------------------
# update to th newest
conda update python

# To install a certain version
conda install python=3.8


# For details, refer to https://code.visualstudio.com/docs/python/environments#_where-the-extension-looks-for-environments

# conda env
A conda environment is a virtual environment that's created and managed using the conda package manager.
Conda is an open-source, cross-platform, language-agnostic package manager and environment management system
language-agnostic: not limited to supporting only 1 type of languages.
----------------------------- conda and env management ----------------------------
// to list all envs
conda-env list

// create a new env
conda create --name myenv


----------------------------- QA ----------------------------
# why there is an import resolution error in vscode?
it probably just means the python your editor is using is not the same interpreter that you're running when you run the server.

# Option1: after switch back to global envirionment and install redis, the error is gone
# Option2: in user setting, modify value of "python env file" to `${workspaceFolder}/venv` and select interpreter in ./venv/bin/python. 
# Now the interpreter in virtual envirionment has been chosen.
 
# what does __init__.py do?


# what does fist line code #!/usr/bin/env python mean? 
/usr/bin/env python3 is an instruction to set the PATH (as well as all the other NAME+VALUE pairs), and then run python3, 
using the first directory in the PATH that contains the python3 executable.

another way less flexible: #!/usr/bin/python.

If you have several versions of Python installed, /usr/bin/env will ensure the interpreter used is the first one on your environment's $PATH. 
The alternative would be to hardcode something like #!/usr/bin/python; that's ok, but less flexible.

In Unix, an executable file that's meant to be interpreted can indicate what interpreter to use by having a #! at the start of the first line, 
followed by the interpreter (and any flags it may need).

In computing, a shebang (also called a hashbang, hashpling, pound bang, or crunchbang) refers to the characters "#!" 
when they are the first two characters in an interpreter directive as the first line of a text file. In a Unix-like operating system,
the program loader takes the presence of these two characters as an indication that the file is a script, and tries to execute that script 
using the interpreter specified by the rest of the first line in the file.

# what does __init__.py do?
Read  https://docs.python.org/3/tutorial/modules.html#tut-packages

----------------------------- Django ----------------------------
You’ve started the Django development server, a lightweight Web server written purely in Python. 
We’ve included this with Django so you can develop things rapidly, without having to deal with configuring a production server – 
such as Apache – until you’re ready for production.

Now’s a good time to note: don’t use this server in anything resembling a production environment. 
It’s intended only for use while developing. (We’re in the business of making Web frameworks, not Web servers.)

python -m django --version

# 
$django-admin startproject <name of site>

# django migrate : https://docs.djangoproject.com/en/3.1/topics/migrations/

# TO start running the server 
$ python manage.py runserver <ip optional>:<port number optional>

# Regarding python -m django, manage.py, django-admin: https://docs.djangoproject.com/en/3.1/ref/django-admin/

# django-admin documentation: https://docs.djangoproject.com/en/3.1/ref/django-admin/

#django project vs app:  https://stackoverflow.com/questions/19350785/what-s-the-difference-between-a-project-and-an-app-in-django-world
// Ideally, your project should be composed by apps. That's why when using the command line, you create a project,
// an later on, add apps to that project.

// Projects vs. apps
// What’s the difference between a project and an app? An app is a Web application that does something – e.g., a Weblog system, 
// a database of public records or a small poll app. A project is a collection of configuration and apps for a particular website. 
// A project can contain multiple apps. An app can be in multiple projects.

# django-admin startproject name [directory] 

----------------------------- Python modules ----------------------------
https://docs.python.org/3/tutorial/modules.html#tut-searchpath

----------------------------- Python Strings ----------------------------
https://docs.python.org/3/tutorial/introduction.html#3.1.2. Strings

----------------------------- Python with redis ----------------------------

# installing redis-py
pip install redis

----------------------------- Python Object Oriented Programming ----------------------------
https://www.geeksforgeeks.org/python-oops-concepts/

// The __init__ method 

The __init__ method is similar to constructors in C++ and Java. It is run as soon as an object of a class is instantiated. The method is useful 
to do any initialization you want to do with your object. 


// pass is like break in java?

// instance variables and class attributes
Attributes created in .__init__() are called instance attributes. An instance attribute’s value is specific to a particular instance of the class. All Dog objects have a name and an age, but the values for the name and age attributes will vary depending on the Dog instance.

On the other hand, class attributes are attributes that have the same value for all class instances. You can define a class attribute by assigning a value to a variable name outside of .__init__().

# None 
In Python, like other languages, None is a value that means "no value". 

----------------------------- Code Snippet ----------------------------
| xuansong:~/projects/python/python-basics (master)$ 
| => ./init-method-example.py 
Traceback (most recent call last):
  File "./init-method-example.py", line 11, in <module>
    Rodger = Dog1("Rodger")
TypeError: __init__() missing 1 required positional argument: 'type'

[python]
class Dog1:
    # class attribute
	attr1 = "mammal"
    # Instance attribute
	def __init__(self, name, type):
		self.name = name
		self.type=type
  
# Driver code
# Object instantiation
Rodger = Dog1("Rodger", None)
Tommy = Dog1("Tommy", None)
[end]


! User input printing
[python]
# How to get user input?
import sys
from tkinter.tix import Tree;

for i in sys.argv:
    print(i);
[end]